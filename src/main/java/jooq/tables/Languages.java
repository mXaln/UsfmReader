/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.DefaultSchema;
import jooq.Indexes;
import jooq.Keys;
import jooq.tables.records.LanguagesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Languages extends TableImpl<LanguagesRecord> {

    private static final long serialVersionUID = 510993248;

    /**
     * The reference instance of <code>languages</code>
     */
    public static final Languages LANGUAGES = new Languages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguagesRecord> getRecordType() {
        return LanguagesRecord.class;
    }

    /**
     * The column <code>languages.id</code>.
     */
    public final TableField<LanguagesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>languages.slug</code>.
     */
    public final TableField<LanguagesRecord, String> SLUG = createField("slug", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>languages.name</code>.
     */
    public final TableField<LanguagesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>languages.direction</code>.
     */
    public final TableField<LanguagesRecord, String> DIRECTION = createField("direction", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>languages</code> table reference
     */
    public Languages() {
        this(DSL.name("languages"), null);
    }

    /**
     * Create an aliased <code>languages</code> table reference
     */
    public Languages(String alias) {
        this(DSL.name(alias), LANGUAGES);
    }

    /**
     * Create an aliased <code>languages</code> table reference
     */
    public Languages(Name alias) {
        this(alias, LANGUAGES);
    }

    private Languages(Name alias, Table<LanguagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Languages(Name alias, Table<LanguagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Languages(Table<O> child, ForeignKey<O, LanguagesRecord> key) {
        super(child, key, LANGUAGES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SQLITE_AUTOINDEX_LANGUAGES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LanguagesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LANGUAGES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LanguagesRecord> getPrimaryKey() {
        return Keys.PK_LANGUAGES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LanguagesRecord>> getKeys() {
        return Arrays.<UniqueKey<LanguagesRecord>>asList(Keys.PK_LANGUAGES, Keys.SQLITE_AUTOINDEX_LANGUAGES_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Languages as(String alias) {
        return new Languages(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Languages as(Name alias) {
        return new Languages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(String name) {
        return new Languages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(Name name) {
        return new Languages(name, null);
    }
}
