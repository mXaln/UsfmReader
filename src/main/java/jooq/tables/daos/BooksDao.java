/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import jooq.tables.Books;
import jooq.tables.records.BooksRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksDao extends DAOImpl<BooksRecord, jooq.tables.pojos.Books, Integer> {

    /**
     * Create a new BooksDao without any configuration
     */
    public BooksDao() {
        super(Books.BOOKS, jooq.tables.pojos.Books.class);
    }

    /**
     * Create a new BooksDao with an attached configuration
     */
    public BooksDao(Configuration configuration) {
        super(Books.BOOKS, jooq.tables.pojos.Books.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(jooq.tables.pojos.Books object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<jooq.tables.pojos.Books> fetchById(Integer... values) {
        return fetch(Books.BOOKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public jooq.tables.pojos.Books fetchOneById(Integer value) {
        return fetchOne(Books.BOOKS.ID, value);
    }

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    public List<jooq.tables.pojos.Books> fetchByLanguageId(Integer... values) {
        return fetch(Books.BOOKS.LANGUAGE_ID, values);
    }

    /**
     * Fetch records that have <code>slug IN (values)</code>
     */
    public List<jooq.tables.pojos.Books> fetchBySlug(String... values) {
        return fetch(Books.BOOKS.SLUG, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<jooq.tables.pojos.Books> fetchByName(String... values) {
        return fetch(Books.BOOKS.NAME, values);
    }

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    public List<jooq.tables.pojos.Books> fetchByLocation(String... values) {
        return fetch(Books.BOOKS.LOCATION, values);
    }
}
