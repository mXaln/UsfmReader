buildscript {
    ext.kotlin_version = '1.2.21'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.no.tornado:fxlauncher-gradle-plugin:1.0.20"
        classpath 'nu.studer:gradle-jooq-plugin:3.0.2'
    }
}

apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "no.tornado.fxlauncher"
apply plugin: 'nu.studer.jooq'

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile 'no.tornado:tornadofx:1.7.14'

    compile 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    compile 'com.github.thomasnield:rxkotlinfx:2.2.2'

    compile 'com.squareup.retrofit2:retrofit:2.4.0'

    compile 'com.squareup.moshi:moshi:1.6.0'
    compile 'com.squareup.retrofit2:converter-moshi:2.4.0'
    compile 'com.squareup.retrofit2:converter-scalars:2.4.0'

    compile 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'

    jooqRuntime 'postgresql:postgresql:9.1-901.jdbc4'
    compile 'org.jooq:jooq'

    testCompile 'junit:junit:4.12'
}

mainClassName = 'org.wa.usfmreader.app.MyApp'

sourceSets {
    main.java.srcDirs += "src/main/kotlin/"
    test.java.srcDirs += "src/test/kotlin/"
}

// gradlew deployApp
fxlauncher {
    applicationVendor "mXaln"
    applicationUrl "http://example.com"
    applicationMainClass "org.wa.usfmreader.app.MyApp"
    acceptDowngrade false
    deployTarget "./build/launcher"
}

jooq {
    //version = '3.11.2'
    //edition = 'OSS'
}

jar {
    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'org.wa.usfmreader.app.MyApp'
        )
    }
    from(configurations.compile.collect { entry -> zipTree(entry) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
}
